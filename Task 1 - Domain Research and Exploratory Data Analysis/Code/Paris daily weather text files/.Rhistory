data_1_day <- Full_dataset %>%
filter(DateTime > "2007-08-06" & DateTime < "2007-08-07")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) + geom_line()
#create a plot for daily energy use
data_1_day <- Full_dataset %>%
filter(DateTime > "2007-08-06" & DateTime < "2007-08-30")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) + geom_line()
#create a plot for daily energy use
data_1_day <- Full_dataset %>%
filter(DateTime > "2007-08-20" & DateTime < "2007-08-21")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) + geom_line()
#create a plot for daily energy use
data_1_day <- Full_dataset %>%
filter(DateTime > "2007-09-20" & DateTime < "2007-09-21")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) + geom_line()
Full_dataset %>%
filter(DateTime > "2007-01-06" & DateTime < "2007-12-07") %>%
summarise(max_energy = max(Sub_metering_3))
Full_dataset %>%
filter(DateTime > "2008-01-06" & DateTime < "2008-12-07") %>%
summarise(max_energy = max(Sub_metering_3))
Full_dataset %>%
filter(DateTime > "2009-01-06" & DateTime < "2009-12-07") %>%
summarise(max_energy = max(Sub_metering_3))
#give the max energy used on a given time by sub_meter_3 for 2007 & 2008
Full_dataset %>%
filter(DateTime > "2007-01-01" & DateTime < "2007-12-31") %>%
summarise(max_energy_2009 = max(Sub_metering_3))
Full_dataset %>%
filter(DateTime > "2008-01-01" & DateTime < "2008-12-31") %>%
summarise(max_energy_2009 = max(Sub_metering_3))
#first name the function and make it ask the person calling for it what time he wants to know what is going on
sub_meter3_on <- function(){
func1_year <- readline("What year is it?")
func1_month <- readline("What month is it?")
func1_day <- readline("What day of the month is it?")
func1_hrs <- readline("What time is it (hrs)?")
func1_mins <- readline("What time is it (mins)?")
#transform the inputs to numbereric valeues that can be used to call the specific date from the full dataset
func1_year <- as.numeric(unlist(strsplit(func1_year, ",")))
func1_month <- as.numeric(unlist(strsplit(func1_month, ",")))
func1_day <- as.numeric(unlist(strsplit(func1_day, ",")))
func1_hrs <- as.numeric(unlist(strsplit(func1_hrs, ",")))
func1_mins <- as.numeric(unlist(strsplit(func1_mins, ",")))
#filter the full dataset to get the specific time period the person calling for the function wanted
func1_heater <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute == func1_mins)
#for air conditioner the time must be taken a bit more broad because when its on it can have 0 kWh on a specific moment but not averaged
func1_airco <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute > (func1_mins - 5),
Minute < (func1_mins + 5))
#provide condition whether sub_meter3 gives indication that the water heater is on
if(func1_heater$Sub_metering_3 > 15){
Water_heater <- "Your water heater is on"
} else {
Water_heater <- "Your water heater is off"
}
#provide conditions whether sub_meter3 gives indication that the air conditioner is on
if(Water_heater == "Your water heater is off"){
if(mean(func1_airco$Sub_metering_3) > 0 &
mean(func1_airco$Sub_metering_3 < 1) |
mean(func1_airco$Sub_metering_3 > 4) &
mean(func1_airco$Sub_metering_3 < 10)){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
} else {
if(mean(func1_airco$Sub_metering_3) > 20){
"Your air conditioning is on"
} else {
"Your air conditioning is off"
}
}
}
#first name the function and make it ask the person calling for it what time he wants to know what is going on
sub_meter3_on <- function(){
func1_year <- readline("What year is it?")
func1_month <- readline("What month is it?")
func1_day <- readline("What day of the month is it?")
func1_hrs <- readline("What time is it (hrs)?")
func1_mins <- readline("What time is it (mins)?")
#transform the inputs to numbereric valeues that can be used to call the specific date from the full dataset
func1_year <- as.numeric(unlist(strsplit(func1_year, ",")))
func1_month <- as.numeric(unlist(strsplit(func1_month, ",")))
func1_day <- as.numeric(unlist(strsplit(func1_day, ",")))
func1_hrs <- as.numeric(unlist(strsplit(func1_hrs, ",")))
func1_mins <- as.numeric(unlist(strsplit(func1_mins, ",")))
#filter the full dataset to get the specific time period the person calling for the function wanted
func1_heater <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute == func1_mins)
#for air conditioner the time must be taken a bit more broad because when its on it can have 0 kWh on a specific moment but not averaged
func1_airco <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute > (func1_mins - 5),
Minute < (func1_mins + 5))
#provide condition whether sub_meter3 gives indication that the water heater is on
if(func1_heater$Sub_metering_3 > 15){
Water_heater <- "Your water heater is on"
} else {
Water_heater <- "Your water heater is off"
}
#provide conditions whether sub_meter3 gives indication that the air conditioner is on
if(Water_heater == "Your water heater is off"){
if(mean(func1_airco$Sub_metering_3) > 0 &
mean(func1_airco$Sub_metering_3 < 1) |
mean(func1_airco$Sub_metering_3 > 4) &
mean(func1_airco$Sub_metering_3 < 10)){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
} else {
if(mean(func1_airco$Sub_metering_3) > 20){
"Your air conditioning is on"
} else {
"Your air conditioning is off"
}
}
#list both results in a list so it can be returned
sub_meter_3_result <- list(Water_heater, airco)
return(sub_meter_3_result)
}
sub_meter3_on
sub_meter3_on()
data_1_day <- Full_dataset %>%
filter(DateTime > "2009-06-06" & DateTime < "2009-06-07")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) + geom_line()
sub_meter3_on()
sub_meter3_on()
sub_meter3_on()
View(data_1_day)
View(data_1_day)
if(Water_heater == "Your water heater is off"){
if(mean(func1_airco$Sub_metering_3) > 0 &
mean(func1_airco$Sub_metering_3 < 1) |
mean(func1_airco$Sub_metering_3 > 4) &
mean(func1_airco$Sub_metering_3 < 10)){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
if(Water_heater == "Your water heater is on"){
if(max(func1_airco$Sub_metering_3) > 20){
"Your air conditioning is on"
} else {
"Your air conditioning is off"
}
}
#list both results in a list so it can be returned
sub_meter_3_result <- list(Water_heater, airco)
return(sub_meter_3_result)
}
#first name the function and make it ask the person calling for it what time he wants to know what is going on
sub_meter3_on <- function(){
func1_year <- readline("What year is it?")
func1_month <- readline("What month is it?")
func1_day <- readline("What day of the month is it?")
func1_hrs <- readline("What time is it (hrs)?")
func1_mins <- readline("What time is it (mins)?")
#transform the inputs to numbereric valeues that can be used to call the specific date from the full dataset
func1_year <- as.numeric(unlist(strsplit(func1_year, ",")))
func1_month <- as.numeric(unlist(strsplit(func1_month, ",")))
func1_day <- as.numeric(unlist(strsplit(func1_day, ",")))
func1_hrs <- as.numeric(unlist(strsplit(func1_hrs, ",")))
func1_mins <- as.numeric(unlist(strsplit(func1_mins, ",")))
#filter the full dataset to get the specific time period the person calling for the function wanted
func1_heater <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute == func1_mins)
#for air conditioner the time must be taken a bit more broad because when its on it can have 0 kWh on a specific moment but not averaged
func1_airco <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute > (func1_mins - 10),
Minute < (func1_mins + 10))
#provide condition whether sub_meter3 gives indication that the water heater is on
if(func1_heater$Sub_metering_3 > 15){
Water_heater <- "Your water heater is on"
} else {
Water_heater <- "Your water heater is off"
}
#provide conditions whether sub_meter3 gives indication that the air conditioner is on
if(Water_heater == "Your water heater is off"){
if(mean(func1_airco$Sub_metering_3) > 0 &
mean(func1_airco$Sub_metering_3 < 1) |
mean(func1_airco$Sub_metering_3 > 4) &
mean(func1_airco$Sub_metering_3 < 10)){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
}
if(Water_heater == "Your water heater is on"){
if(max(func1_airco$Sub_metering_3) > 20){
"Your air conditioning is on"
} else {
"Your air conditioning is off"
}
}
#list both results in a list so it can be returned
sub_meter_3_result <- list(Water_heater, airco)
return(sub_meter_3_result)
}
sub_meter3_on()
#first name the function and make it ask the person calling for it what time he wants to know what is going on
sub_meter3_on <- function(){
func1_year <- readline("What year is it?")
func1_month <- readline("What month is it?")
func1_day <- readline("What day of the month is it?")
func1_hrs <- readline("What time is it (hrs)?")
func1_mins <- readline("What time is it (mins)?")
#transform the inputs to numbereric valeues that can be used to call the specific date from the full dataset
func1_year <- as.numeric(unlist(strsplit(func1_year, ",")))
func1_month <- as.numeric(unlist(strsplit(func1_month, ",")))
func1_day <- as.numeric(unlist(strsplit(func1_day, ",")))
func1_hrs <- as.numeric(unlist(strsplit(func1_hrs, ",")))
func1_mins <- as.numeric(unlist(strsplit(func1_mins, ",")))
#filter the full dataset to get the specific time period the person calling for the function wanted
func1_heater <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute == func1_mins)
#for air conditioner the time must be taken a bit more broad because when its on it can have 0 kWh on a specific moment but not averaged
func1_airco <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute > (func1_mins - 10),
Minute < (func1_mins + 10))
#provide condition whether sub_meter3 gives indication that the water heater is on
if(func1_heater$Sub_metering_3 > 15){
Water_heater <- "Your water heater is on"
} else {
Water_heater <- "Your water heater is off"
}
#provide conditions whether sub_meter3 gives indication that the air conditioner is on
if(Water_heater == "Your water heater is off"){
if(mean(func1_airco$Sub_metering_3) > 0 &
mean(func1_airco$Sub_metering_3 < 1) |
mean(func1_airco$Sub_metering_3 > 4) &
mean(func1_airco$Sub_metering_3 < 10)){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
}
if(Water_heater == "Your water heater is on"){
if(max(func1_airco$Sub_metering_3) > 20){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
}
#list both results in a list so it can be returned
sub_meter_3_result <- list(Water_heater, airco)
return(sub_meter_3_result)
}
sub_meter3_on()
View(sub_meter3_on)
View(data_1_day)
View(data_1_day)
View(data_1_day)
View(data_1_day)
nrow(data_1_day==1)
nrow(data_1_day == 1)
nrow(data_1_day == 0)
nrow(data_1_day)
#first name the function and make it ask the person calling for it what time he wants to know what is going on
sub_meter3_on <- function(){
func1_year <- readline("What year is it?")
func1_month <- readline("What month is it?")
func1_day <- readline("What day of the month is it?")
func1_hrs <- readline("What time is it (hrs)?")
func1_mins <- readline("What time is it (mins)?")
#transform the inputs to numbereric valeues that can be used to call the specific date from the full dataset
func1_year <- as.numeric(unlist(strsplit(func1_year, ",")))
func1_month <- as.numeric(unlist(strsplit(func1_month, ",")))
func1_day <- as.numeric(unlist(strsplit(func1_day, ",")))
func1_hrs <- as.numeric(unlist(strsplit(func1_hrs, ",")))
func1_mins <- as.numeric(unlist(strsplit(func1_mins, ",")))
#filter the full dataset to get the specific time period the person calling for the function wanted
func1_heater <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute == func1_mins)
#for air conditioner the time must be taken a bit more broad because when its on it can have 0 kWh on a specific moment but not averaged
func1_airco <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute > (func1_mins - 5),
Minute < (func1_mins + 5))
#If both items are on, we need a broader range to test since we need to find some of the maximums
func1_both <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute > (func1_mins - 60),
Minute < (func1_mins + 60))
#provide condition whether sub_meter3 gives indication that the water heater is on
if(func1_heater$Sub_metering_3 > 15){
Water_heater <- "Your water heater is on"
} else {
Water_heater <- "Your water heater is off"
}
#provide conditions whether sub_meter3 gives indication that the air conditioner is on
if(mean(func1_airco$Sub_metering_3) > 0 &
mean(func1_airco$Sub_metering_3 < 1) |
mean(func1_airco$Sub_metering_3 > 4) &
mean(func1_airco$Sub_metering_3 < 10) |
max(func1_both$Sub_metering_3 > 25) |
max(func1_both$Sub_metering_3 > 17) &
nrow(filter(func1_both , Sub_metering_3 == 1)) > 12
){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
#list both results in a list so it can be returned
sub_meter_3_result <- list(Water_heater, airco)
return(sub_meter_3_result)
}
View(sub_meter3_on)
sub_meter3_on
sub_meter3_on()
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 1 - Domain Research and Exploratory Data Analysis/Code/Part 1 - General data setup.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 1 - Domain Research and Exploratory Data Analysis/Code/Part 2 - Weather data setup.R', echo=TRUE)
#create a plot for daily use of the water heater
data_1_day <- Full_dataset %>%
filter(DateTime > "2007-11-13" & DateTime < "2007-11-14")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line() +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 1.5) +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.5) +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.1) +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.1, color = "red") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
ggplot(data_2_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = o.1, color = "blue") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
data_2_day <- Full_dataset %>%
filter(DateTime > "2008-08-06" & DateTime < "2008-08-07")
ggplot(data_2_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = o.1, color = "blue") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
ggplot(data_2_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.1, color = "blue") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
ggplot(aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.1, color = "blue") +
geom_line(size = 0.1, color = "red") +
theme_classic()
ggplot(data_3_day, aes(x = DateTime)) +
geom_line( y = Sub_metering_3, size = 0.1, color = "blue") +
geom_line(y = sub_m_3, size = 0.1, color = "red") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
#create a plot for combining the 2
data_3_day <- data_2_day
data_3_day$sub_m_3 <- data_1_day$Sub_metering_3
ggplot(data_3_day, aes(x = DateTime)) +
geom_line( y = Sub_metering_3, size = 0.1, color = "blue") +
geom_line(y = sub_m_3, size = 0.1, color = "red") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
View(data_3_day)
ggplot(data_3_day, aes(x = DateTime)) +
geom_line(y = Sub_metering_3, size = 0.1, color = "blue") +
geom_line(y = sub_m_3, size = 0.1, color = "red") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
ggplot(data_3_day, aes(x = DateTime)) +
geom_line(y = Sub_metering_3, size = 0.1, color = "blue") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
ggplot(data_3_day, aes(x = DateTime)) +
geom_line(y = data_3_day$Sub_metering_3, size = 0.1, color = "blue") +
geom_line(y = data_3_day$sub_m_3, size = 0.1, color = "red") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
ggplot(data_2_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.1, color = "blue") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
ggplot(data_2_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.1, color = "orange") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
ggplot(data_2_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.1, color = "orange") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Air conditioner kWh stats",
subtitle = "A day where only the Airconditioner was used")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.1, color = "lightblue") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.1, color = "tomato") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "Water heater kWh stats",
subtitle = "A day where only the water heater was used")
data_3_day <- Full_dataset %>%
filter(DateTime > "2008-09-06" & DateTime < "2008-09-07")
ggplot(data_2_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.1, color = "blue") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "total kWh stats",
subtitle = "A day where both items were used")
data_3_day <- Full_dataset %>%
filter(DateTime > "2008-010-06" & DateTime < "2008-10-07")
ggplot(data_2_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.1, color = "blue") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "total kWh stats",
subtitle = "A day where both items were used")
data_3_day <- Full_dataset %>%
filter(DateTime > "2009-10-06" & DateTime < "2009-10-07")
ggplot(data_2_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.1, color = "blue") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "total kWh stats",
subtitle = "A day where both items were used")
data_3_day <- Full_dataset %>%
filter(DateTime > "2009-09-06" & DateTime < "2009-09-07")
ggplot(data_3_day, aes(x = DateTime, y = Sub_metering_3)) +
geom_line(size = 0.1, color = "blue") +
theme_classic() +
labs(x = "Day", y = "kWh",
title = "total kWh stats",
subtitle = "A day where both items were used")
