filter(DateTime > "2007-06-06" & DateTime < "2007-06-07")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) + geom_line()
#create a plot for daily energy use
data_1_day <- Full_dataset %>%
filter(DateTime > "2007-08" & DateTime < "2007-08-07")
#create a plot for daily energy use
data_1_day <- Full_dataset %>%
filter(DateTime > "2007-08-06" & DateTime < "2007-08-07")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) + geom_line()
#create a plot for daily energy use
data_1_day <- Full_dataset %>%
filter(DateTime > "2007-08-06" & DateTime < "2007-08-30")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) + geom_line()
#create a plot for daily energy use
data_1_day <- Full_dataset %>%
filter(DateTime > "2007-08-20" & DateTime < "2007-08-21")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) + geom_line()
#create a plot for daily energy use
data_1_day <- Full_dataset %>%
filter(DateTime > "2007-09-20" & DateTime < "2007-09-21")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) + geom_line()
Full_dataset %>%
filter(DateTime > "2007-01-06" & DateTime < "2007-12-07") %>%
summarise(max_energy = max(Sub_metering_3))
Full_dataset %>%
filter(DateTime > "2008-01-06" & DateTime < "2008-12-07") %>%
summarise(max_energy = max(Sub_metering_3))
Full_dataset %>%
filter(DateTime > "2009-01-06" & DateTime < "2009-12-07") %>%
summarise(max_energy = max(Sub_metering_3))
#give the max energy used on a given time by sub_meter_3 for 2007 & 2008
Full_dataset %>%
filter(DateTime > "2007-01-01" & DateTime < "2007-12-31") %>%
summarise(max_energy_2009 = max(Sub_metering_3))
Full_dataset %>%
filter(DateTime > "2008-01-01" & DateTime < "2008-12-31") %>%
summarise(max_energy_2009 = max(Sub_metering_3))
#first name the function and make it ask the person calling for it what time he wants to know what is going on
sub_meter3_on <- function(){
func1_year <- readline("What year is it?")
func1_month <- readline("What month is it?")
func1_day <- readline("What day of the month is it?")
func1_hrs <- readline("What time is it (hrs)?")
func1_mins <- readline("What time is it (mins)?")
#transform the inputs to numbereric valeues that can be used to call the specific date from the full dataset
func1_year <- as.numeric(unlist(strsplit(func1_year, ",")))
func1_month <- as.numeric(unlist(strsplit(func1_month, ",")))
func1_day <- as.numeric(unlist(strsplit(func1_day, ",")))
func1_hrs <- as.numeric(unlist(strsplit(func1_hrs, ",")))
func1_mins <- as.numeric(unlist(strsplit(func1_mins, ",")))
#filter the full dataset to get the specific time period the person calling for the function wanted
func1_heater <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute == func1_mins)
#for air conditioner the time must be taken a bit more broad because when its on it can have 0 kWh on a specific moment but not averaged
func1_airco <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute > (func1_mins - 5),
Minute < (func1_mins + 5))
#provide condition whether sub_meter3 gives indication that the water heater is on
if(func1_heater$Sub_metering_3 > 15){
Water_heater <- "Your water heater is on"
} else {
Water_heater <- "Your water heater is off"
}
#provide conditions whether sub_meter3 gives indication that the air conditioner is on
if(Water_heater == "Your water heater is off"){
if(mean(func1_airco$Sub_metering_3) > 0 &
mean(func1_airco$Sub_metering_3 < 1) |
mean(func1_airco$Sub_metering_3 > 4) &
mean(func1_airco$Sub_metering_3 < 10)){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
} else {
if(mean(func1_airco$Sub_metering_3) > 20){
"Your air conditioning is on"
} else {
"Your air conditioning is off"
}
}
}
#first name the function and make it ask the person calling for it what time he wants to know what is going on
sub_meter3_on <- function(){
func1_year <- readline("What year is it?")
func1_month <- readline("What month is it?")
func1_day <- readline("What day of the month is it?")
func1_hrs <- readline("What time is it (hrs)?")
func1_mins <- readline("What time is it (mins)?")
#transform the inputs to numbereric valeues that can be used to call the specific date from the full dataset
func1_year <- as.numeric(unlist(strsplit(func1_year, ",")))
func1_month <- as.numeric(unlist(strsplit(func1_month, ",")))
func1_day <- as.numeric(unlist(strsplit(func1_day, ",")))
func1_hrs <- as.numeric(unlist(strsplit(func1_hrs, ",")))
func1_mins <- as.numeric(unlist(strsplit(func1_mins, ",")))
#filter the full dataset to get the specific time period the person calling for the function wanted
func1_heater <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute == func1_mins)
#for air conditioner the time must be taken a bit more broad because when its on it can have 0 kWh on a specific moment but not averaged
func1_airco <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute > (func1_mins - 5),
Minute < (func1_mins + 5))
#provide condition whether sub_meter3 gives indication that the water heater is on
if(func1_heater$Sub_metering_3 > 15){
Water_heater <- "Your water heater is on"
} else {
Water_heater <- "Your water heater is off"
}
#provide conditions whether sub_meter3 gives indication that the air conditioner is on
if(Water_heater == "Your water heater is off"){
if(mean(func1_airco$Sub_metering_3) > 0 &
mean(func1_airco$Sub_metering_3 < 1) |
mean(func1_airco$Sub_metering_3 > 4) &
mean(func1_airco$Sub_metering_3 < 10)){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
} else {
if(mean(func1_airco$Sub_metering_3) > 20){
"Your air conditioning is on"
} else {
"Your air conditioning is off"
}
}
#list both results in a list so it can be returned
sub_meter_3_result <- list(Water_heater, airco)
return(sub_meter_3_result)
}
sub_meter3_on
sub_meter3_on()
data_1_day <- Full_dataset %>%
filter(DateTime > "2009-06-06" & DateTime < "2009-06-07")
ggplot(data_1_day, aes(x = DateTime, y = Sub_metering_3)) + geom_line()
sub_meter3_on()
sub_meter3_on()
sub_meter3_on()
View(data_1_day)
View(data_1_day)
if(Water_heater == "Your water heater is off"){
if(mean(func1_airco$Sub_metering_3) > 0 &
mean(func1_airco$Sub_metering_3 < 1) |
mean(func1_airco$Sub_metering_3 > 4) &
mean(func1_airco$Sub_metering_3 < 10)){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
if(Water_heater == "Your water heater is on"){
if(max(func1_airco$Sub_metering_3) > 20){
"Your air conditioning is on"
} else {
"Your air conditioning is off"
}
}
#list both results in a list so it can be returned
sub_meter_3_result <- list(Water_heater, airco)
return(sub_meter_3_result)
}
#first name the function and make it ask the person calling for it what time he wants to know what is going on
sub_meter3_on <- function(){
func1_year <- readline("What year is it?")
func1_month <- readline("What month is it?")
func1_day <- readline("What day of the month is it?")
func1_hrs <- readline("What time is it (hrs)?")
func1_mins <- readline("What time is it (mins)?")
#transform the inputs to numbereric valeues that can be used to call the specific date from the full dataset
func1_year <- as.numeric(unlist(strsplit(func1_year, ",")))
func1_month <- as.numeric(unlist(strsplit(func1_month, ",")))
func1_day <- as.numeric(unlist(strsplit(func1_day, ",")))
func1_hrs <- as.numeric(unlist(strsplit(func1_hrs, ",")))
func1_mins <- as.numeric(unlist(strsplit(func1_mins, ",")))
#filter the full dataset to get the specific time period the person calling for the function wanted
func1_heater <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute == func1_mins)
#for air conditioner the time must be taken a bit more broad because when its on it can have 0 kWh on a specific moment but not averaged
func1_airco <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute > (func1_mins - 10),
Minute < (func1_mins + 10))
#provide condition whether sub_meter3 gives indication that the water heater is on
if(func1_heater$Sub_metering_3 > 15){
Water_heater <- "Your water heater is on"
} else {
Water_heater <- "Your water heater is off"
}
#provide conditions whether sub_meter3 gives indication that the air conditioner is on
if(Water_heater == "Your water heater is off"){
if(mean(func1_airco$Sub_metering_3) > 0 &
mean(func1_airco$Sub_metering_3 < 1) |
mean(func1_airco$Sub_metering_3 > 4) &
mean(func1_airco$Sub_metering_3 < 10)){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
}
if(Water_heater == "Your water heater is on"){
if(max(func1_airco$Sub_metering_3) > 20){
"Your air conditioning is on"
} else {
"Your air conditioning is off"
}
}
#list both results in a list so it can be returned
sub_meter_3_result <- list(Water_heater, airco)
return(sub_meter_3_result)
}
sub_meter3_on()
#first name the function and make it ask the person calling for it what time he wants to know what is going on
sub_meter3_on <- function(){
func1_year <- readline("What year is it?")
func1_month <- readline("What month is it?")
func1_day <- readline("What day of the month is it?")
func1_hrs <- readline("What time is it (hrs)?")
func1_mins <- readline("What time is it (mins)?")
#transform the inputs to numbereric valeues that can be used to call the specific date from the full dataset
func1_year <- as.numeric(unlist(strsplit(func1_year, ",")))
func1_month <- as.numeric(unlist(strsplit(func1_month, ",")))
func1_day <- as.numeric(unlist(strsplit(func1_day, ",")))
func1_hrs <- as.numeric(unlist(strsplit(func1_hrs, ",")))
func1_mins <- as.numeric(unlist(strsplit(func1_mins, ",")))
#filter the full dataset to get the specific time period the person calling for the function wanted
func1_heater <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute == func1_mins)
#for air conditioner the time must be taken a bit more broad because when its on it can have 0 kWh on a specific moment but not averaged
func1_airco <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute > (func1_mins - 10),
Minute < (func1_mins + 10))
#provide condition whether sub_meter3 gives indication that the water heater is on
if(func1_heater$Sub_metering_3 > 15){
Water_heater <- "Your water heater is on"
} else {
Water_heater <- "Your water heater is off"
}
#provide conditions whether sub_meter3 gives indication that the air conditioner is on
if(Water_heater == "Your water heater is off"){
if(mean(func1_airco$Sub_metering_3) > 0 &
mean(func1_airco$Sub_metering_3 < 1) |
mean(func1_airco$Sub_metering_3 > 4) &
mean(func1_airco$Sub_metering_3 < 10)){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
}
if(Water_heater == "Your water heater is on"){
if(max(func1_airco$Sub_metering_3) > 20){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
}
#list both results in a list so it can be returned
sub_meter_3_result <- list(Water_heater, airco)
return(sub_meter_3_result)
}
sub_meter3_on()
View(sub_meter3_on)
View(data_1_day)
View(data_1_day)
View(data_1_day)
View(data_1_day)
nrow(data_1_day==1)
nrow(data_1_day == 1)
nrow(data_1_day == 0)
nrow(data_1_day)
#first name the function and make it ask the person calling for it what time he wants to know what is going on
sub_meter3_on <- function(){
func1_year <- readline("What year is it?")
func1_month <- readline("What month is it?")
func1_day <- readline("What day of the month is it?")
func1_hrs <- readline("What time is it (hrs)?")
func1_mins <- readline("What time is it (mins)?")
#transform the inputs to numbereric valeues that can be used to call the specific date from the full dataset
func1_year <- as.numeric(unlist(strsplit(func1_year, ",")))
func1_month <- as.numeric(unlist(strsplit(func1_month, ",")))
func1_day <- as.numeric(unlist(strsplit(func1_day, ",")))
func1_hrs <- as.numeric(unlist(strsplit(func1_hrs, ",")))
func1_mins <- as.numeric(unlist(strsplit(func1_mins, ",")))
#filter the full dataset to get the specific time period the person calling for the function wanted
func1_heater <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute == func1_mins)
#for air conditioner the time must be taken a bit more broad because when its on it can have 0 kWh on a specific moment but not averaged
func1_airco <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute > (func1_mins - 5),
Minute < (func1_mins + 5))
#If both items are on, we need a broader range to test since we need to find some of the maximums
func1_both <- Full_dataset %>%
filter(Year == func1_year,
Month == func1_month,
Day == func1_day,
Hour ==  func1_hrs,
Minute > (func1_mins - 60),
Minute < (func1_mins + 60))
#provide condition whether sub_meter3 gives indication that the water heater is on
if(func1_heater$Sub_metering_3 > 15){
Water_heater <- "Your water heater is on"
} else {
Water_heater <- "Your water heater is off"
}
#provide conditions whether sub_meter3 gives indication that the air conditioner is on
if(mean(func1_airco$Sub_metering_3) > 0 &
mean(func1_airco$Sub_metering_3 < 1) |
mean(func1_airco$Sub_metering_3 > 4) &
mean(func1_airco$Sub_metering_3 < 10) |
max(func1_both$Sub_metering_3 > 25) |
max(func1_both$Sub_metering_3 > 17) &
nrow(filter(func1_both , Sub_metering_3 == 1)) > 12
){
airco <- "Your air conditioning is on"
} else {
airco <- "Your air conditioning is off"
}
#list both results in a list so it can be returned
sub_meter_3_result <- list(Water_heater, airco)
return(sub_meter_3_result)
}
View(sub_meter3_on)
sub_meter3_on
sub_meter3_on()
pacman::p_load('dplyr','bbplot', 'lubridate', 'RMySQL', 'tidyr',
'gapminder', 'readr', 'ggplot2', 'forecast',
'ggfortify','forcats', 'R.utils', 'plotly', 'prophet')
library(gtrendsR)
google.trends = gtrends(c("porn"), gprop = "web", time = "all")
Pr0n <- google.trends["interest_over_time"]
Pr0n <- google.trends[["interest_over_time"]]
class(pr0n)
class(Pr0n)
View(Pr0n)
Pr0n <- Pr0n %>% select(ds = date, y = hits)
View(Pr0n)
TS_dataset_Pr0n <- prophet(Pr0n, yearly.seasonality=TRUE)
TS_future_Pr0n <- make_future_dataframe(TS_dataset_Pr0n, periods = 24, freq = "month")
forecast_Pr0n <- predict(TS_dataset_Pr0n, TS_future_Pr0n)
plot(TS_dataset_Pr0n, forecast_Pr0n)
prophet_plot_components(TS_dataset_Pr0n, forecast_Pr0n)
plot(TS_dataset_Pr0n, forecast_Pr0n)
prophet_plot_components(TS_dataset_Pr0n, forecast_Pr0n)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 1 - Domain Research and Exploratory Data Analysis/Code/Part 1 - General data setup.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 2 - Visualize and Analyze Energy Data/Code/Part 3 - Time series setup.R', echo=TRUE)
library(keras)
install_keras()
install_tenserflow()
mnist <- dataset_mnist()
install.packages("keras", type = "source")
install.packages("keras", type = "source")
library(keras)
install_keras()
library(keras)
mnist <- dataset_mnist()
install_keras(method = c("auto", "virtualenv", "conda"),
conda = "auto", version = "default", tensorflow = "default",
extra_packages = c("tensorflow-hub"))
install_keras(method = c("auto", "virtualenv", "conda"),
conda = "auto", version = "default", tensorflow = "default",
extra_packages = c("tensorflow-hub"))
install_keras(method = c("auto", "virtualenv", "conda"),
conda = "auto", version = "default", tensorflow = "default",
extra_packages = c("tensorflow-hub"))
library(keras)
install_keras(method = c("auto", "virtualenv", "conda"),
conda = "auto", version = "default", tensorflow = "default",
extra_packages = c("tensorflow-hub"))
install.packages("tensorflow")
install.packages("keras")
library("keras")
install_keras()
mnist <- dataset_mnist()
set.seed(123)
#Make training and testing sets
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
set.seed(123)
#take the MNIST number data
mnist <- dataset_mnist()
#Make training and testing sets of the x data (3-d array (images,width,height) of grayscale values).
x_train <- mnist$train$x
x_test <- mnist$test$x
#Make training and testing sets of the y data (integer vector with values ranging from 0 to 9).
y_train <- mnist$train$y
y_test <- mnist$test$y
x_train
#Reshape the image pixel matrix into a vector (24x 24 becomes a vector of 784)
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_train
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
y_test
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
y_train
y_test <- to_categorical(y_test, 10)
y_train
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 10, activation = 'softmax')
model
model <- keras_model_sequential()
model
model %>%
#this layer gives the length of the INPUT data (784), together with the amount different color values (256)
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
#This is the second layer in the model, for which the algorithm finds itself chooses what patterns it is looking for
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
#this layer gives the length of the OUTPUT data (a value between 0-9).
#The softmax parameter tells the model to give a probability for each of these 10 values. The highest probability wins
layer_dense(units = 10, activation = 'softmax')
summary(model)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model %>% evaluate(x_test, y_test)
plot(history)
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
x_test <- x_test / 255
y_test <- to_categorical(y_test, 10)
model %>% evaluate(x_test, y_test)
y_test <- to_categorical(y_test, 10)
model %>% evaluate(x_test, y_test)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?register_google
register_google
register_google()
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/1) Partition training and testsets.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/2) Caret applied.R', echo=TRUE)
1234 <- paste("hello","hi")
assign(paste("hello","hi"),1+1)
(paste("hello","hi")
paste("hello","hi")
paste("hello","hi")
class(paste("hello","hi"))
#read results into R
predictions <- readRDS("2019-03-07 predicted values")
results <- readRDS("Results of loop 2019-03-06")
#add all actual y values in 1 dataframe with the results
predictions <- data.frame(predictions)
y_df_test <- data.frame(y_list_test)
predictions$ID <- seq.int(nrow(predictions))
y_df_test$ID <- seq.int(nrow(y_df_test))
all_y_values <- left_join(y_df_test, predictions, by = "ID")
remove(y_list_test, y_df_test, predictions)
#plot results
ggplot(all_y_values) +
geom_point(aes(x = LONGITUDE, y = LATITUDE)) +
geom_point(aes(x = gbm_predict_LONGITUDE, y = gbm_predict_LATITUDE, colour = BUILDINGID))
#plot results
ggplot(all_y_values) +
geom_point(aes(x = LONGITUDE, y = LATITUDE)) +
geom_point(aes(x = rf_predict_LONGITUDE, y = rf_predict_LATITUDE, colour = BUILDINGID))
#plot results
ggplot(all_y_values) +
geom_point(aes(x = LONGITUDE, y = LATITUDE)) +
geom_point(aes(x = knn_predict_LONGITUDE, y = knn_predict_LATITUDE, colour = BUILDINGID))
