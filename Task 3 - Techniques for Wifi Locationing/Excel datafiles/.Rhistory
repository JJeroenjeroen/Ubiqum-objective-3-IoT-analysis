y = y_train_BUILDINGID[,1],
method = train_method,
metric = train_metric,
trControl = fitControl)
train_test <- train(x = x_list[1,],
y = y_train_BUILDINGID[,1],
method = train_method,
metric = train_metric,
trControl = fitControl)
train_test <- train(x = x_list[[1]],
y = y_train_BUILDINGID[,1],
method = train_method,
metric = train_metric,
trControl = fitControl)
train_test <- train(x = x_list["BUILDINGID"],
y = y_train_BUILDINGID[,1],
method = train_method,
metric = train_metric,
trControl = fitControl)
train_test <- train(x = x_list[BUILDINGID],
y = y_train_BUILDINGID[,1],
method = train_method,
metric = train_metric,
trControl = fitControl)
y_list[y_names[,1]]
y_list[y_names[1]]
train_test <- train(x = x_train_BUILDINGID,
y = y_list[y_names[1]],
method = train_method,
metric = train_metric,
trControl = fitControl)
train_test <- train(x = x_train_BUILDINGID,
y = as.factor(y_list[y_names[1]]),
method = train_method,
metric = train_metric,
trControl = fitControl)
train_test <- train(x = x_train_BUILDINGID,
y = as.factor(y_list[y_names[,1]]),
method = train_method,
metric = train_metric,
trControl = fitControl)
train_test <- train(x = x_train_BUILDINGID,
y = (y_list[as.factor(y_names[,1]])),
method = train_method,
metric = train_metric,
trControl = fitControl)
y_train_BUILDINGID[,1]
y_list
y_list[1]
train_test <- train(x = x_train_BUILDINGID,
y = y_list[1],
method = train_method,
metric = train_metric,
trControl = fitControl)
train_test <- train(x = x_train_BUILDINGID,
y = factor(y_list[1]),
method = train_method,
metric = train_metric,
trControl = fitControl)
train_test <- train(x = x_train_BUILDINGID,
y = as.factor(y_list[1]),
method = train_method,
metric = train_metric,
trControl = fitControl)
as.factor(y_list[1])
class(y_list[1])
class(y_list[[1]])
(y_list[[1]])
train_test <- train(x = x_train_BUILDINGID,
y = (y_list[[1]]),
method = train_method,
metric = train_metric,
trControl = fitControl)
class(x_train_BUILDINGID)
class(x_list[1])
class(as.data.frame(x_list[1]))
as.data.frame(x_list[1])
class(x_list[[1]])
(x_list[[1]])
train_test <- train(x = x_list[[1]],
y = (y_list[[1]]),
method = train_method,
metric = train_metric,
trControl = fitControl)
train_test <- train(x = x_list[["BUILDINGID"]],
y = (y_list[[1]]),
method = train_method,
metric = train_metric,
trControl = fitControl)
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_", y_names[i]),  train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
metric = train_metric,
trControl = fitControl))
}
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_", y_names[i]),  train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
trControl = fitControl))
}
remove(train_test)
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
trControl = fitControl))
}
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/First models/multiple partition try ou.R', echo=TRUE)
#set cross validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
#set training parameters
train_method = "knn"
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats)
train_metric <- "Accuracy"
train_tuneLength = 1
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
trControl = fitControl))
}
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
trControl = fitControl))
assign(paste("knn_predictions_",
y_names[i],
sep = ""),
predict(paste("knn_fit_",
y_names[i],
sep = ""), newdata = wifi_test))
}
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
trControl = fitControl))
}
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
trControl = fitControl))
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
trControl = fitControl))
}
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
trControl = fitControl))
}
(y_list[[1]]
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/First models/multiple partition try ou.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/First models/multiple partition try ou.R', echo=TRUE)
#set cross validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats)
#set training parameters
train_method = "knn"
train_metric <- "Accuracy"
train_tuneLength = 1
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
trControl = fitControl))
}
y_list[[y_names[1]]]
y_list[y_names[1]]
#create a vector of names for y values data partitioning
y_names <- c('BUILDINGID', 'FLOOR', 'LATITUDE', 'LONGITUDE')
y_list[y_names[1]]
y_names[1]
y_list[[1]]
#create a vector of names for y values data partitioning
y_names <- c("BUILDINGID", "FLOOR", "LATITUDE", "LONGITUDE")
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/First models/multiple partition try ou.R', echo=TRUE)
#set cross validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats)
#set training parameters
train_method = "knn"
train_metric <- "Accuracy"
train_tuneLength = 1
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
trControl = fitControl))
}
y_list[[1]]
class(y_list[[1]])
class(y_list[[y_names(1)]])
class(y_list[[y_names[1]]])
y_list[[y_names[1]]]
[y_names[1]
y_names[1]
y_list[["BUILDINGID"]]
y_list["BUILDINGID"]
y_list[BUILDINGID]
y_list[[BUILDINGID]]
y_list[["BUILDINGID"]]
y_list <- c(BUILDINGID = y_train_BUILDINGID,
FLOOR = y_train_FLOOR,
LATITUDE = y_train_LATITUDE,
LONGITUDE = y_train_LONGITUDE)
y_list[1]
y_list[[1]]
y_list <- c(y_train_BUILDINGID,
FLOOR = y_train_FLOOR,
LATITUDE = y_train_LATITUDE,
LONGITUDE = y_train_LONGITUDE)
y_list[1]
y_list["BUILDINGID"]
y_list <- c(y_train_BUILDINGID,
y_train_FLOOR,
y_train_LATITUDE,
y_train_LONGITUDE)
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list[[y_names[i]]],
y = y_list[y_names[i]],
method = train_method,
trControl = fitControl))
}
y_list["BUILDINGID"]
y_list[y_names["BUILDINGID"]]
y_list[y_names[1]]
class(y_list[y_names[1]])
class(y_list[[y_names[1]]])
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
trControl = fitControl))
}
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/First models/multiple partition try ou.R', echo=TRUE)
#set cross validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats)
#set training parameters
train_method = "knn"
train_metric <- "Accuracy"
train_tuneLength = 1
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
trControl = fitControl))
}
#predict brand outcomes on the testing data
Prediction_knn <- predict(knn_Fit_BUILDINGID, newdata = wifi_test_xvalues)
#predict brand outcomes on the testing data
Prediction_knn <- predict(knn_fit_BUILDINGID, newdata = wifi_test_xvalues)
#predict brand outcomes on the testing data
Prediction_knn <- predict(knn_fit_BUILDINGID, newdata = wifi_test&BUILDINGID)
wifi_test
#predict brand outcomes on the testing data
Prediction_knn <- predict(knn_fit_BUILDINGID, newdata = wifi_test&BUILDINGID)
#predict brand outcomes on the testing data
Prediction_knn <- predict(knn_fit_BUILDINGID, newdata = wifi_test$BUILDINGID)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/First models/multiple partition try ou.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/First models/multiple partition try ou.R', echo=TRUE)
View(test_set_BUILDINGID)
View(train_set_FLOOR)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/First models/adding test set test.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/First models/Loops/1) Partition training and testsets.R', echo=TRUE)
#set cross validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats)
#set training parameters
train_method = "knn"
train_metric <- "Accuracy"
train_tuneLength = 1
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list[[y_names[i]]],
y = y_list[[y_names[i]]],
method = train_method,
trControl = fitControl))
}
x_list_test  <- list(BUILDINGID = x_test_BUILDINGID,
FLOOR =  x_test_FLOOR,
LATITUDE =  x_test_LATITUDE,
LONGITUDE = x_test_LONGITUDE)
y_list_test <- c(y_test_BUILDINGID,
y_test_FLOOR,
y_test_LATITUDE,
y_test_LONGITUDE)
y_list_test
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/First models/Loops/1) Partition training and testsets.R', echo=TRUE)
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list_train[[y_names[i]]],
y = y_list_train[[y_names[i]]],
method = train_method,
trControl = fitControl))
assign(paste("knn_predict_",
y_names[i],
sep = ""),
predict(paste("knn_fit_", y_names[i], sep = ""),
newdata = x_list_test[[y_names[i]]]))
assign(paste("knn_outcome_",
y_names[i],
sep = ""),
postResample(paste("knn_fit_", y_names[i], sep = "")
, y_list_test[[y_names[i]]]))
}
#set cross validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats)
#set training parameters
train_method = "knn"
train_metric <- "Accuracy"
train_tuneLength = 1
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list_train[[y_names[i]]],
y = y_list_train[[y_names[i]]],
method = train_method,
trControl = fitControl))
assign(paste("knn_predict_",
y_names[i],
sep = ""),
predict(paste("knn_fit_", y_names[i], sep = ""),
newdata = x_list_test[[y_names[i]]]))
assign(paste("knn_outcome_",
y_names[i],
sep = ""),
postResample(paste("knn_fit_", y_names[i], sep = "")
, y_list_test[[y_names[i]]]))
}
x_list_test[[y_names[i]]]
class(x_list_test[[y_names[i]]])
class(x_list_test[[y_names[i]]])
class(x_list_test[[y_names[1]]])
class(x_list_test[[y_names[1]]])
class(x_list_test[[y_names[2]]])
(paste("knn_fit_", y_names[1], sep = "")
(paste("knn_fit_", y_names[1], sep = ""))
class(paste("knn_fit_", y_names[1], sep = ""))
paste("knn_fit_", y_names[1], sep = "")
class(paste("knn_fit_", y_names[1], sep = ""))
as.name(paste("knn_fit_", y_names[1], sep = ""))
class(as.name(paste("knn_fit_", y_names[1], sep = "")))
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list_train[[y_names[i]]],
y = y_list_train[[y_names[i]]],
method = train_method,
trControl = fitControl))
assign(paste("knn_predict_",
y_names[i],
sep = ""),
predict(as.name(paste("knn_fit_", y_names[i], sep = "")),
newdata = x_list_test[[y_names[i]]]))
assign(paste("knn_outcome_",
y_names[i],
sep = ""),
postResample(as.name(paste("knn_fit_", y_names[i], sep = ""))
, y_list_test[[y_names[i]]]))
}
#the following for-loop will loop all datasets x & y's and make a trained knn model for them
for (i in 1:length(y_names)){
set.seed(124)
#create fitted values
assign(paste("knn_fit_",
y_names[i],
sep = ""),
train(x = x_list_train[[y_names[i]]],
y = y_list_train[[y_names[i]]],
method = train_method,
trControl = fitControl))
#create a throwaway fit that can be used in this loop
throwaway_fit <- train(x = x_list_train[[y_names[i]]],
y = y_list_train[[y_names[i]]],
method = train_method,
trControl = fitControl)
#create predictions
assign(paste("knn_predict_",
y_names[i],
sep = ""),
predict(throwaway_fit,
newdata = x_list_test[[y_names[i]]]))
#create a throwaway predict that can be used in this loop and removed afterwards
throwaway_predict <- predict(throwaway_fit,
newdata = x_list_test[[y_names[i]]])
#create outcomes
assign(paste("knn_outcome_",
y_names[i],
sep = ""),
postResample(throwaway_predict
, y_list_test[[y_names[i]]]))
remove(throwaway_fit)
remove(throwaway_predict)
}
print(knn_fit_BUILDINGID)
#show values in confusion matrix
confusionMatrix(data = knn_outcome_BUILDINGID, y_test_BUILDINGID&BUILDINGID)
#show values in confusion matrix
confusionMatrix(data = knn_outcome_BUILDINGID, y_test_BUILDINGID$BUILDINGID)
y_test_BUILDINGID$BUILDINGID
knn_outcome_BUILDINGID
#show values in confusion matrix
confusionMatrix(data = knn_predict_BUILDINGID, y_test_BUILDINGID$BUILDINGID)
confusionMatrix(data = knn_predict_FLOOR, y_test_FLOOR$FLOOR)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/First models/Loops/1) Partition training and testsets.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/First models/Loops/knn loop.R', echo=TRUE)
